---
title: "Level DB 源码解析 (1): 跳表"
date: 2023-04-14T23:34:34+08:00
draft: false
author: ziyi
---
Level DB 源码阅读笔记
<!--more-->


* Level DB
以 2023/04/14 最新 commit 77d66aa 代码为准。
* 跳表简介
跳表就是在有序单链表上建立多级索引的数据结构，各级索引同样是有序的。
把原本的有序单链表称作 0 级索引，一直建立到 n 级索引。
1        ->        5         ->        9
↓                  ↓                   ↓
1 ->     3  ->     5 ->      7    ->   9
↓        ↓         ↓         ↓         ↓
1-> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9
查找时，先从最高级索引查找，再依次查找低级索引，直到 0 级索引。
例如要查找跳表中是否有 8 ，那么从 2 级索引开始，查找到节点 5 ，
节点 5 的后继大于 8， 所以开始查找 1 级索引，查找到 1 级索引的节点 7，
其后继大于 8 ，查找 0 级索引，查找到 8.
利用节点有序性，只进行了3 次查找，如果是单链表则需要 7 次查找。
* Level DB 中的跳表
代码位于 db/skiplist.h ，在头文件中实现了一个泛型跳表。
这份实现基于以下约束：
1. 直到跳表被删除之前，分配的节点都不会被删除。这是 Level DB 自身决定的。
2. 除了 next/prev 指针之外，节点其它内容在其被链接到跳表后都是不变的。
   只有 Insert() 函数会修改跳表，而该函数小心地初始化节点后，使用
   release-stores (store 使用C++原子变量的 std::memory_order_release 内存序) 来将它添加到各个表上。

所以这份实现只有 Insert 与 Get 方法，没有实现 Delete.
* Get
要使用 SkipList::Iterator::Seek 方法来 Get ，源码如下:
#+begin_src C++
template <typename Key, class Comparator>
inline void SkipList<Key, Comparator>::Iterator::Seek(const Key& target) {
  node_ = list_->FindGreaterOrEqual(target, nullptr);
}

template <typename Key, class Comparator>
typename SkipList<Key, Comparator>::Node*
SkipList<Key, Comparator>::FindGreaterOrEqual(const Key& key,
                                              Node** prev) const {
  Node* x = head_;
  int level = GetMaxHeight() - 1;
  while (true) {
    Node* next = x->Next(level);
    if (KeyIsAfterNode(key, next)) {
      // Keep searching in this list
      x = next;
    } else {
      if (prev != nullptr) prev[level] = x;
      if (level == 0) {
        return next;
      } else {
        // Switch to next list
        level--;
      }
    }
  }
}
#+end_src

list_ 是一个跳表指针，调用了下面的 FindGreaterOrEqual 方法。
源码也很容易读懂，就是从最高级的索引开始线性查找链表，如果 key 在 next 节点后面，
那就跳到下一个节点。prev 指针的作用是用于返回 key 在各个索引中所应该处的位置，
在 Get 过程中不需要用到。
如果已经是最底层的链表，那么就返回 next 节点，否则往更低级的索引查找。

* Insert
跳表有多级索引，插入数据时，可以让新元素有 1/(t^n) 的概率建立 n 级索引，
链表中元素够多时，这样抽取的索引是随机的，因而不会导致链表查找时间复杂度的升高。
链表实现中的 RandomHeight 函数，以1/(4^n)的概率返回 n, 1 <= n <= kMaxHeight.
先来看源码：
#+begin_src C++
template <typename Key, class Comparator>
void SkipList<Key, Comparator>::Insert(const Key& key) {
  // TODO(opt): We can use a barrier-free variant of FindGreaterOrEqual()
  // here since Insert() is externally synchronized.
  Node* prev[kMaxHeight];
  // prev 保存各级索引中新节点的 prev 节点指针
  Node* x = FindGreaterOrEqual(key, prev);

  // Our data structure does not allow duplicate insertion
  assert(x == nullptr || !Equal(key, x->key));

  // 获取要插入的索引等级
  int height = RandomHeight();
  if (height > GetMaxHeight()) {
    for (int i = GetMaxHeight(); i < height; i++) {
      prev[i] = head_;
    }
    // 不去同步并发的 reader 而修改 max_height_ 是没问题的
    // 一个观察到新 max_height_ 值的 reader 要么
    // 1. 从 head_ (即 nullptr) 指针读到新一层的指针
    // 2. 或者是以下循环产生的新值集合
    // 在情形1. 因为 nullptr 在所有的 key 之后，该 reader 会立即跳到下一层
    // 在情形2. 使用新的节点
    max_height_.store(height, std::memory_order_relaxed);
  }

  x = NewNode(key, height);
  for (int i = 0; i < height; i++) {
    // NoBarrier_SetNext 够用的原因是我们在 publish 一个指向 x 的指针时
    // 会加上内存屏障
    x->NoBarrier_SetNext(i, prev[i]->NoBarrier_Next(i));
    prev[i]->SetNext(i, x);
  }
}
#+end_src

* 并发的正确性
**  并发写
thread-1 和 thread-2 并发调用 Insert，其参数 key1 和 key2 非常接近，
以至于插入的每级索引都在相同的节点后面，此时两个线程都执行到了这个循环。
#+begin_src C++
  for (int i = 0; i < height; i++) {
    x->NoBarrier_SetNext(i, prev[i]->NoBarrier_Next(i));
    prev[i]->SetNext(i, x);
  }
  
  void SetNext(int n, Node* x) {
      assert(n >= 0);
      // Use a 'release store' so that anybody who reads through this
      // pointer observes a fully initialized version of the inserted node.
      next_[n].store(x, std::memory_order_release);
  }
#+end_src
thread-1 和 thread-2 都将新节点的后继指向了 prev[i] 的原后继，此时再更新 prev[i] 的后继到x，
必定会丢失 thread-1 或 thread-2 其中一个 Insert ，
结论正如 skiplist.h 开头注释所言，并发写需要外部同步。
**  并发单读单写
thread-1 调用 Insert，thread-2 并发调用 Seek，它们之间没有加同步。
因为 std::memory_order_acquire 能够观察到所有发生在 std::memory_order_release 之前的写入，
所以如 Insert 注释所言，thread-1 修改跳表的高度是没有问题的。
thread-2 不一定能立即观察到 thread-2 写的结果，只能保证读到的结果是 thread-1 写入前正确的版本
或是 thread-1 写入后正确的版本。同时，在thread-2 中如果调用 FindGreaterOrEqual ，
也无法保证返回 prev 数组正确性，因而实现中只有在 Insert 函数才会使用 FindGreaterOrEqual 返回的 prev 数组。
